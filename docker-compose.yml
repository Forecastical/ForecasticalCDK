version: '3.5'
services:
  backend:
    build: ./backend/
    volumes:
      - ./userdata:/data
    ports:
      - "8000:8000"
    networks:
      - postgres
  frontend:
    build: ./frontend/
    ports:
      - "3000:8080"
        #  open-meteo:
        #    image: ghcr.io/open-meteo/open-meteo
        #    volumes:
        #      - "./open-meteo/data:/app/data"
        #    ports:
        #      - '8080:8080'
        #    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
        #  sync-forecast:
        #    image: ghcr.io/open-meteo/open-meteo
        #    container_name: open-meteo-sync
        #    depends_on:
        #      - open-meteo
        #    volumes:
        #      - "./open-meteo/data:/app/data"
        #    command: ["sync", "ecmwf_ifs04", "temperature_2m"]
        #    restart: no
        #
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
        #volumes:
      #- pgadmin:/var/lib/pgadmin

    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  open-meteo-data:
